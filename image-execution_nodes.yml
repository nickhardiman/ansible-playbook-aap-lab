---
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_networking_infrastructure_services/providing-dhcp-services_networking-infrastructure-services#doc-wrapper

# controlplane.site1.example.com
# The machine has one interface on the private libvirt network.
# It uses gateway as a web proxy.
# it hosts an AAP2 controller.

# Use a kickstart file to install and configure the OS.

- name: add image facts to hostvars
  hosts: execution_nodes
  become: true
  gather_facts: false
  roles:
    - name: "check for existing images"
      role: nick.platform.libvirt_image_facts
      delegate_to: "{{ groups['hypervisor'][0] }}"

- name: Kickstart a new machine
  hosts: execution_nodes
  become: true
  gather_facts: false
  serial: 1
  pre_tasks:
    - name: don't overwrite anything
      meta: end_host
      when: volume_image_file_exists
  roles:
    - name: "kickstart the VM on hypervisor {{ groups['hypervisor'][0] }}"
      role: nick.platform.libvirt_machine_kickstart
      delegate_to: "{{ groups['hypervisor'][0] }}"
    - name: "update /etc/hosts on install host {{ groups['install_host'][0] }}"
      role: nick.platform.hosts_record
      vars:
        h_ip_address: "{{ nics[0]['ip'] }}"
        h_fqdn: "{{ fqdn }}"
        h_host: "{{ host }}"
      delegate_to: "{{ groups['install_host'][0] }}"
  tasks:
    - name: There is now an image file
      set_fact:
        volume_image_file_exists: true


- name: Start new server machine
  hosts: execution_nodes
  become: true
  gather_facts: false
  serial: 1
  roles:
    - name: "run machine (it stops after install)"
      role: nick.platform.libvirt_machine_start
      delegate_to: "{{ groups['install_host'][0] }}"
      when: volume_image_file_exists


- name: Configure new server machine
  hosts: execution_nodes
  become: true
  gather_facts: false
  serial: 1
  vars_files:
    - vault-credentials.yml
  environment:
    http_proxy: http://gateway.site1.lab.example.com:3128
    HTTPS_PROXY: http://gateway.site1.lab.example.com:3128
    no_proxy: localhost,127.0.0.1,example.com
    
  pre_tasks:
    - name: "don't overwrite anything"
      ansible.builtin.meta: end_host
      when: volume_base_file_exists
    - ansible.builtin.setup:

  roles:
    - role: nick.platform.managed_node
    - role: nick.platform.dns_client_of_id
    - role: nick.platform.dns_record
      vars:
        zone_forward_name: "{{ lab_domain_forward }}"
        # remove domain, leave host and maybe subdomain
        # !!! hardcoded
        record_a_name: "{{ inventory_hostname | regex_replace('.lab.example.com') }}"
        record_a_value: "{{ nics[0]['ip'] }}"
        zone_reverse_name: "{{ lab_domain_reverse }}"
        # use the last octet only
        record_ptr_name: "{{ nics[0]['ip'].split('.')[3] }}"
        # DNS is fussy about root domain '.'
        record_ptr_value: "{{ inventory_hostname + '.' }}"
    - role: nick.platform.cdn_repo_consumer
      vars:
        server_proxy_hostname: gateway.site1.lab.example.com
        server_proxy_port: 3128
    - role: nick.platform.latest_packages
    - role: nick.platform.server_cert
    - role: nick.platform.smtp_client


# create $FQDN-base.qcow2 image and $FQDN.xml config.
# if the $FQDN-base.qcow2 file already exists, this role does not change anything.
- name: Keep image and config of the new machine
  hosts: execution_nodes
  become: true
  gather_facts: false
  serial: 1

  pre_tasks:
    - name: "Don't overwrite anything"
      ansible.builtin.meta: end_host
      when: volume_base_file_exists

  roles:
    - name: "Copy the volume image file to base file, dump XML config, then delete the machine"
      role: nick.platform.libvirt_machine_image
      delegate_to: "{{ groups['hypervisor'][0] }}"
